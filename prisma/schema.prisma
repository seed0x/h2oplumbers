// All County Plumbing Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Custom application tables
model Customer {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  phone       String
  address     String?
  city        String?
  state       String?  @default("WA")
  zipCode     String?
  latitude    Float?
  longitude   Float?
  notes       String?  @db.Text
  source      String?  // How they found us
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]
  leads        Lead[]
  reviews      Review[]
  
  @@map("customers")
}

model Appointment {
  id              String            @id @default(cuid())
  customerId      String
  serviceId       String
  scheduledAt     DateTime
  duration        Int               @default(60) // minutes
  status          AppointmentStatus @default(SCHEDULED)
  priority        Priority          @default(NORMAL)
  description     String?           @db.Text
  address         String
  city            String
  state           String            @default("WA")
  zipCode         String
  technicianNotes String?           @db.Text
  internalNotes   String?           @db.Text
  estimatedCost   Decimal?          @db.Decimal(10, 2)
  actualCost      Decimal?          @db.Decimal(10, 2)
  completedAt     DateTime?
  cancelledAt     DateTime?
  cancelReason    String?
  reminderSentAt  DateTime?
  followUpSentAt  DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  service  Service  @relation(fields: [serviceId], references: [id])

  @@index([scheduledAt])
  @@index([status])
  @@index([zipCode])
  @@map("appointments")
}

model Service {
  id               String   @id @default(cuid())
  name             String
  description      String   @db.Text
  category         String
  basePrice        Decimal  @db.Decimal(10, 2)
  hourlyRate       Decimal? @db.Decimal(10, 2)
  isEmergency      Boolean  @default(false)
  isActive         Boolean  @default(true)
  estimatedDuration Int     @default(60) // minutes
  metadata         Json?    // Additional service data
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  appointments Appointment[]
  leads        Lead[]

  @@map("services")
}

model Review {
  id           String     @id @default(cuid())
  customerId   String?
  googleId     String?    @unique // Google Reviews ID
  platform     String     @default("google") // google, yelp, facebook, etc.
  rating       Int        // 1-5 stars
  title        String?
  content      String     @db.Text
  authorName   String
  authorImage  String?
  isPublished  Boolean    @default(false)
  isVerified   Boolean    @default(false)
  reviewDate   DateTime
  responseText String?    @db.Text
  responseDate DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  customer Customer? @relation(fields: [customerId], references: [id])

  @@index([platform])
  @@index([rating])
  @@index([isPublished])
  @@map("reviews")
}

model Lead {
  id              String     @id @default(cuid())
  customerId      String?
  serviceId       String?
  name            String
  email           String
  phone           String
  address         String?
  city            String?
  state           String?    @default("WA")
  zipCode         String?
  description     String     @db.Text
  urgency         Priority   @default(NORMAL)
  preferredDate   DateTime?
  preferredTime   String?    // "morning", "afternoon", "evening"
  budget          Decimal?   @db.Decimal(10, 2)
  source          String?    // website, google, referral, etc.
  status          LeadStatus @default(NEW)
  assignedTo      String?    // User ID
  followUpDate    DateTime?
  convertedAt     DateTime?  // When lead became customer
  notes           String?    @db.Text
  metadata        Json?      // Additional lead data
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  customer Customer? @relation(fields: [customerId], references: [id])
  service  Service?  @relation(fields: [serviceId], references: [id])

  @@index([status])
  @@index([createdAt])
  @@index([zipCode])
  @@map("leads")
}

model ServiceArea {
  id          String   @id @default(cuid())
  zipCode     String   @unique
  city        String
  state       String   @default("WA")
  county      String?
  isActive    Boolean  @default(true)
  travelTime  Int?     // minutes from base
  surcharge   Decimal? @db.Decimal(8, 2)
  emergencyFee Decimal? @db.Decimal(8, 2)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("service_areas")
}

model EmergencyQueue {
  id          String           @id @default(cuid())
  customerId  String?
  name        String
  phone       String
  email       String?
  address     String
  city        String
  state       String           @default("WA")
  zipCode     String
  description String           @db.Text
  severity    EmergencySeverity @default(MODERATE)
  status      EmergencyStatus  @default(PENDING)
  assignedTo  String?          // User ID
  estimatedArrival DateTime?
  arrivedAt   DateTime?
  completedAt DateTime?
  totalCost   Decimal?         @db.Decimal(10, 2)
  notes       String?          @db.Text
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([status])
  @@index([createdAt])
  @@index([severity])
  @@map("emergency_queue")
}

model Newsletter {
  id              String   @id @default(cuid())
  email           String   @unique
  firstName       String?
  lastName        String?
  isActive        Boolean  @default(true)
  isVerified      Boolean  @default(false)
  verificationToken String? @unique
  source          String?  // Where they subscribed
  tags            String[] // Interests/preferences
  subscribedAt    DateTime @default(now())
  unsubscribedAt  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("newsletter")
}

// Enums
enum UserRole {
  USER
  ADMIN
  TECHNICIAN
  DISPATCHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  QUOTED
  CONVERTED
  LOST
  FOLLOW_UP
}

enum EmergencySeverity {
  LOW
  MODERATE
  HIGH
  CRITICAL
}

enum EmergencyStatus {
  PENDING
  ASSIGNED
  EN_ROUTE
  ON_SITE
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
